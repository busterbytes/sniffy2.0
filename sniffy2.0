#! /usr/bin/python
# Sniffy by Shane Rogers
# For DF2
# April 2017
# SEE README FILE FOR MORE INFO
#used to silence unnecessary warnings
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

#import scapy
from scapy.all import *
#used to check pcap input
import sys

try:
    import pygtk
    pygtk.require("2.0")
except:
    pass
try:
    from gi.repository import Gtk
except:
    print("GTK Not Available")
    sys.exit(1)




#create GUI
class sniffy_gui():
    #wTree = None
    ## Variables needed
    pcap = ""
    protocol = ""
    buffer = Gtk.TextBuffer()

    def __init__(self):
        self.gladefile = "sniffy_gui.glade"
        self.glade = Gtk.Builder()
        self.glade.add_from_file(self.gladefile)

        self.glade.get_object("window_main").show_all()


        dic = {"on_file_button_file_set" : self.file_selected, #set pcap to file chosen
        "on_protocol_chooser_changed" : self.protocol_chosen,#set protocol = chosen protocol
        "on_button_display_packets_clicked": self.btn_display_packets_clicked,
        "on_window_main_destroy" : Gtk.main_quit
        }
        self.glade.connect_signals(dic)
       # self.wTree.signal_autoconnect(dic)

    def file_selected(self, widget):
        print "File selected"
        self.pcap = widget.get_filename()
        print("File selected: %s" % self.pcap)

    def protocol_chosen(self, widget):
        print "Protocol selected"
        self.protocol = widget.get_active_text()
        print("Protocol selected: %s" % self.protocol)

    def btn_display_packets_clicked(self, widget):
    # Set pcap to the name of the file and open it
    # Print to screen that pcap is being opened

        self.entryForText = self.glade.get_object("textview1")
        self.entryForText.get_buffer().set_text(" ")
        if self.pcap == "":
            print("Please choose a pcap file")
        elif self.protocol =="":
            print("Please choose a protocol")
        else:
            print " "
            print " Opening",
            print self.pcap
            print " "
            pkts = rdpcap(self.pcap)

            # Read all packets from pcap file and filter out
            # only those having to do with TCP

            pkt_no = 0
            sys.stdout = open('sniffy_output.txt', 'w')


            for pkt in pkts:
                if pkt.haslayer(self.protocol) == 1:
                    pkt_no += 1
                ## write summary and other info from packets to file
                    print "Packet # ",
                    print pkt_no,
                    print " "
                    summary = str(pkt.summary())
                    print(summary)
                    print " "
                    show = str(pkt.show())
                    print(show)
                    print " "


            sys.stdout = sys.__stdout__
            if pkt_no > 0:
                print "%s Packet info written to sniffy_output.txt" % self.protocol
                print " "
                f = open('sniffy_output.txt', 'r')
                for line in f.xreadlines():
                    self.entryForText.get_buffer().insert_at_cursor(line)
            if pkt_no == 0:
                regrets = "No %s Traffic Found " % self.protocol
                print regrets
                print " "
                self.entryForText.get_buffer().insert_at_cursor(regrets)


# Check to make sure user passed in a pcap file
# if len(sys.argv) != 2:
#     print("Usage: ./sniffy <pcap name>")
#     print "For more info try: ./sniffy --help"
#     exit()
#
# if sys.argv[1] == "--help":
# 	print "############################################################"
# 	print "                    WElCOME TO SNIFFY"
# 	print "############################################################"
# 	print "#                                                          #"
# 	print "# Sniffy is a TCP packet sniffer and quite easy to use.    #"
# 	print "# Just activate sniffy and pass it the pcap file you       #"
# 	print "# would like to extract TCP packet information from        #"
# 	print "# Like this:                                               #"
# 	print "#                                                          #"
# 	print "#               ./sniffy mypcap.pcap                       #"
# 	print "#                                                          # "
# 	print "# Sniffy will extract all information available from all   #"
# 	print "# TCP packets inside of your pcap, including packet data   #"
# 	print "# if available and will write all of the data into a file  #"
# 	print "# named sniffy_output.txt in your current directory.       #"
# 	print "#                                                          # "
# 	print "############################################################"
# 	print " Sniffy was written and is maintained by Shane Rogers using"
# 	print " Python and the Scapy library 2014   shane@shanerogers.info   "
# 	print "############################################################"
#
# 	exit()



if __name__ == "__main__":
    gui = sniffy_gui()
    Gtk.main()


